"use strict";

/* "Завернул" задания 1-2 в комментарий, потому что переменная "а" объявляется потом заново в задании 3.

Задание 1

var a = 1, b = 1, c, d;

c = ++a; alert(c);           // 2 Сначала добавляется единица
// в значение переменной "а" (это префиксный инкремент), а потом уже это значение (цифра 2) присваивается переменной "с". Получается цифра 2.

d = b++; alert(d);           // 1 Сначала переменной "d" присваивается значение
// переменной "b" (цифра 1), это значение будет
// выведено на экран, а потом уже оно станет на 1 больше в самой переменной "b" (это постфиксный 
//инкремент)

c = (2+ ++a); alert(c);      // 5 В скобках происходит операция сложения. К цифре "2" прибавляется значение
// переменной "а" с префиксным инкрементом. После предыдущей операции кода (с = ++а) в переменную "а" было
// записано значение 2 (поскольку "а" увеличилась на единицу). Теперь в переменную "а" добавляется еще единица,
// получается значение 3, и потом уже это новое значение складывается с цифрой 2. Результат - цифра 5.

d = (2+ b++); alert(d);      // 4 После предыдущей строки кода (где было d = b++) значение переменной "b"
// увеличилось на 1 и стало равно 2. В данной строке кода происходит сложение цифры 2 с переменной "b" с
// постфинксным инкрементом. То есть сначала будет произведено сложение цифры 2 с существующим на данный момент
// значением переменной "b" (2), это результат (4) будет присвоен переменной "d", а уже потом значение
// переменной "b" увеличится на единицу и станет равно цифре 3.

alert(a);                    // 3 Объяснение было дано выше.
alert(b);                    // 3 Объяснение было дано выше.

var a = 2;
var x = 1 + (a *= 2); // Сначала происходит операция в скобках (потому что скобки дают выше приоритет).
// выражение в скобках умножает значение переменной "a" на 2. Результат - цифра 4. Затем эта цифра
// складывается с цифрой 1. Получается результат - цифра 5, который и присваивается теперь переменной "x".

alert("Variable X equals: " + x);


/* 3. Объявить две целочисленные переменные a и b и задать им произвольные начальные значения. Затем написать скрипт, который работает по следующему принципу:
//     если a и b положительные, вывести их разность;
//     если а и b отрицательные, вывести их произведение;
//     если а и b разных знаков, вывести их сумму; ноль можно считать положительным числом. ### 


let a = 5;
let b = 8;
let c = 0;
if(a >= 0 && b >= 0) {
    c = a - b;
    alert("Difference A and B equals: " + c);
} else if (a < 0 && b < 0) {
    c = a * b;
    alert("Multiplication of A and B equals: " + c);
} else if ((a >= 0 && b < 0) || (a < 0 && b >= 0)) {
    c = a + b;
    alert("Sum of A and B equals: " + c);
}

*/

/*
4. Присвоить переменной а значение в промежутке [0..15]. С помощью оператора switch организовать вывод чисел от a до 15. ### 

let a = 12;

switch(someNumber) {
    case 
}


*/

/*
5. Реализовать основные 4 арифметические операции в виде функций с двумя параметрами. Обязательно использовать оператор return. ### 
*/
/*
6. Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation), где arg1, arg2 – значения аргументов, 
operation – строка с названием операции. В зависимости от переданного значения операции выполнить 
одну из арифметических операций (использовать функции из пункта 3) и вернуть полученное значение (использовать switch). ### 




*/

/*
7. *Сравнить null и 0. Попробуйте объяснить результат. ### 


*/

/*
8. *С помощью рекурсии организовать функцию возведения числа в степень. 
Формат: function power(val, pow), где val – заданное число, pow – степень.


*/